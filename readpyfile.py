import os 
file_py = open("Client_facerec.py",'r')
r = file_py.readlines() 
print(r)
output_file = ['import face_recognition\n', 'import cv2 ,imutils, socket\n', 'import numpy as np\n', 'from itertools import count \n', 'import time\n', 'import base64\n', "# This is a demo of running face recognition on live video from your webcam. It's a little more complicated than the\n", '# other example, but it includes some basic performance tweaks to make things run a lot faster:\n', '#   1. Process each video frame at 1/4 resolution (though still display it at full resolution)\n', '#   2. Only detect faces in every other frame of video.\n', '\n', '# PLEASE NOTE: This example requires OpenCV (the `cv2` library) to be installed only to read from your webcam.\n', "# OpenCV is *not* required to use the face_recognition library. It's only required if you want to run this\n", "# specific demo. If you have trouble installing it, try any of the other demos that don't require it instead.\n", '\n', '# Get a reference to webcam #0 (the default one)\n', 'BUFF_SIZE = 65536\n', 'client_socket = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\n', 'client_socket.setsockopt(socket.SOL_SOCKET,socket.SO_RCVBUF,BUFF_SIZE)\n', 'host_name = socket.gethostname()\n', "host_ip = '192.168.50.192'#  socket.gethostbyname(host_name)\n", 'print(host_ip)\n', 'port = 9800\n', "message = b'Hello'\n", '\n', 'client_socket.sendto(message,(host_ip,port))\n', 'fps,st,frames_to_count,cnt = (0,0,20,0)\n', '# Load a sample picture and learn how to recognize it.\n', 'obama_image = face_recognition.load_image_file("obama.jpg")\n', 'obama_face_encoding = face_recognition.face_encodings(obama_image)[0]\n', '\n', '# Load a second sample picture and learn how to recognize it.\n', 'biden_image = face_recognition.load_image_file("biden.jpg")\n', 'biden_face_encoding = face_recognition.face_encodings(biden_image)[0]\n', '\n', '# Create arrays of known face encodings and their names\n', 'known_face_encodings = [\n', '    obama_face_encoding,\n', '    biden_face_encoding\n', ']\n', 'known_face_names = [\n', '    "Barack Obama",\n', '    "Joe Biden"\n', ']\n', '\n', '# Initialize some variables\n', 'face_locations = []\n', 'face_encodings = []\n', 'face_names = []\n', 'process_this_frame = True\n', '\n', 'for r in count(0):\n', '    # Grab a single frame of video\n', '    #ret, frame = video_capture.read()\n', '    packet,_ = client_socket.recvfrom(BUFF_SIZE)\n', "    data = base64.b64decode(packet,' /')\n", '    npdata = np.fromstring(data,dtype=np.uint8)\n', '    frame = cv2.imdecode(npdata,1)\n', '    # Resize frame of video to 1/4 size for faster face recognition processing\n', '    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)\n', '\n', '    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)\n', '    rgb_small_frame = small_frame[:, :, ::-1]\n', '\n', '    # Only process every other frame of video to save time\n', '    if process_this_frame:\n', '        # Find all the faces and face encodings in the current frame of video\n', '        face_locations = face_recognition.face_locations(rgb_small_frame)\n', '        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)\n', '\n', '        face_names = []\n', '        for face_encoding in face_encodings:\n', '            # See if the face is a match for the known face(s)\n', '            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)\n', '            name = "Unknown"\n', '\n', '            # # If a match was found in known_face_encodings, just use the first one.\n', '            # if True in matches:\n', '            #     first_match_index = matches.index(True)\n', '            #     name = known_face_names[first_match_index]\n', '\n', '            # Or instead, use the known face with the smallest distance to the new face\n', '            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)\n', '            best_match_index = np.argmin(face_distances)\n', '            if matches[best_match_index]:\n', '                name = known_face_names[best_match_index]\n', '\n', '            face_names.append(name)\n', '            print(frame) \n', '    process_this_frame = not process_this_frame\n', '\n', '\n', '    # Display the results\n', '    for (top, right, bottom, left), name in zip(face_locations, face_names):\n', '        # Scale back up face locations since the frame we detected in was scaled to 1/4 size\n', '        top *= 4\n', '        right *= 4\n', '        bottom *= 4\n', '        left *= 4\n', '\n', '        # Draw a box around the face\n', '        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)\n', '\n', '        # Draw a label with a name below the face\n', '        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)\n', '        font = cv2.FONT_HERSHEY_DUPLEX\n', '        cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)\n', '\n', '    # Display the resulting image\n', "    cv2.imshow('Video', frame)\n", '\n', "    # Hit 'q' on the keyboard to quit!\n", "    if cv2.waitKey(1) & 0xFF == ord('q'):\n", '        break\n', '\n', '# Release handle to the webcam\n', '\n', '\n']
